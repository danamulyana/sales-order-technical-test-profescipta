@model TechnicalTest_Profescipta.Common.DTO.SalesOrder;

<form asp-action="Save" method="post" id="salesOrderForm">
    <div class="row">
        <div class="col-12">
            <div class="card mb-4">
                <div class="card-header">
                    <h1 class="h6 text-center">Sales Order Information</h1>
                </div>
                <div class="card-body">
                    @Html.HiddenFor(model => model.SoOrderId)
                    <div class="row">
                        <div class="col-md-6 col-12">
                            <div class="mb-3">
                                <label for="sales-order-number">Sales Order Number <span class="text-danger">*</span></label>
                                <input type="text" id="sales-order-number" asp-for="OrderNo" name="OrderNo" class="form-control" required placeholder="Sales Order Number" aria-label="sales-order-number" aria-describedby="sales-order-number">
                            </div>
                        </div>
                        <div class="col-md-6 col-12">
                            <div class="mb-3">
                                <label for="customer">Customer <span class="text-danger">*</span></label>
                                <select type="" id="customer" class="form-control" asp-for="ComCustomerId" name="ComCustomerId" required asp-items="ViewBag.customer" aria-label="Customer" aria-describedby="Customer">
                                    <option value="">Please Select</option>
                                </select>
                            </div>
                        </div>
                        <div class="col-md-6 col-12">
                            <div class="mb-3">
                                <label for="order-date">Order Date <span class="text-danger">*</span></label>
                                <input type="date" id="order-date" asp-for="OrderDate" name="OrderDate" class="form-control" required placeholder="Order Date" aria-label="Order Date" aria-describedby="Order Date">
                            </div>
                        </div>
                        <div class="col-md-6 col-12">
                            <div class="mb-3">
                                <label for="address">Address</label>
                                <textarea id="address" name="address" asp-for="Address" class="form-control" placeholder="Address" aria-label="Address" aria-describedby="Address"></textarea>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>

    <div class="row">
        <div class="col-12">
            <div class="card mb-4">
                <div class="card-header">
                    <h1 class="h6 text-center">Detail Item Information</h1>
                </div>
                <div class="card-body">
                    <div class="row">
                        <div class="col-12">
                            <button type="button" id="btnAddItem" class="btn btn-primary mb-3"><i class="fa fa-plus"></i> Add Item</button>
                        </div>
                        <div class="col-12">

                            <table id="table-item" class="table table-striped table-responsive">
                                <thead>
                                    <tr>
                                        <th>No</th>
                                        <th>Action</th>
                                        <th>Item Name</th>
                                        <th>Qty</th>
                                        <th>Price</th>
                                        <th>Total</th>
                                    </tr>
                                </thead>
                                <tbody>
                                </tbody>
                                <tfoot>
                                    <tr>
                                        <th colspan="3">Total Items:</th>
                                        <th id="totalItems">0</th>
                                        <th>Total Amount:</th>
                                        <th id="totalAmount">0.00</th>
                                    </tr>
                                </tfoot>
                            </table>
                            <input type="hidden" id="Items" name="Items">
                        </div>
                        <div class="col-12">
                            <div class="text-center">
                                <button id="btnSaveOrder" type="submit" class="btn btn-success">Save</button>
                                <button id="btnClose" type="button" class="btn btn-secondary" onclick="window.location.href='/order'">Close</button>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>
</form>

@section Scripts{
    <script>
        function debounce(func, wait) {
            let timeout;
            return function (...args) {
                clearTimeout(timeout);
                timeout = setTimeout(() => func.apply(this, args), wait);
            };
        }

        const salesOrderItems = @Html.Raw(Json.Serialize(Model.Items));

        const table = $('#table-item').DataTable({
                searching: false,
                responsive: true,
                lengthChange: false,
                ordering: false,
                data: salesOrderItems.map((a, index) => ({...a, No : index + 1})),
                columns: [
                    {
                        data: 'No',
                        render: function (data, type, row, meta) {
                            return data;
                        } 
                    },
                    {
                        data: "isSave",
                        render: function(data, type, row, meta) {
                            if(data){
                                return `<div class="d-flex gap-2 text-center action" data-id="${data}" >
                            <button class="btn btn-primary btn-edit mb-0" type="button" ><i class="fa fa-edit"></i></button>
                            <button class="btn btn-danger btn-delete mb-0" type="button" data-trash="${row.SoItemId}"><i class="fa fa-trash"></i></button>
                            </div>`;
                            }
                            return '<button class="btn btn-primary btn-save" type="button"><i class="fa fa-save"></i> Save</button>'
                        }
                    },
                    {
                        data: 'ItemName',
                        render: function (data, type, row) {
                            return `<input type="text" class="form-control item-name editable" required value="${data}" data-field="ItemName" data-id="${row.SoItemId}" ${row.isSave ? 'disabled' : ''}>`;
                        }
                    },
                    {
                        data: 'Quantity',
                        render: function (data, type, row) {
                            return `<input type="number" class="form-control quantity editable" value="${data}" data-field="Quantity" data-id="${row.SoItemId}" ${row.isSave ? 'disabled' : ''}>`;
                        }
                    },
                    {
                        data: 'Price',
                        render: function (data, type, row) {
                            return `<input type="number" class="form-control price editable" value="${data}" data-field="Price" step="0.01" data-id="${row.SoItemId}" ${row.isSave ? 'disabled' : ''}>`;
                        }
                    },
                    {
                        data: 'Total',
                    }
                ],
                footerCallback: function (row, data, start, end, display) {
                    let totalQty = data.reduce((sum, item) => sum + item.Quantity, 0);
                    let totalAmount = data.reduce((sum, item) => sum + item.Total, 0);
                    $('#totalItems').text(totalQty);
                    $('#totalAmount').text(totalAmount.toFixed(2));
                },
                drawCallback: function () {
                    $('#table-item').on('input', '.editable', debounce(handleInputChange, 1000));
                    $('#table-item').on('click', '.btn-save', handleSaveRow);
                    $('#table-item').on('click', '.btn-edit', handleEditRow);
                    $('#table-item').on('click', '.btn-delete', handleDeleteRow);
                }
        });

        document.querySelector('#btnAddItem').addEventListener('click', (e) => {
            e.preventDefault();

            const newItem = {
                'No': table.data().count() + 1,
                'SoItemId' : 0,
                'SoOrderId' : 0,
                'ItemName' : "",
                'Quantity' : 0,
                'Price' : 0,
                'Total' : 0,
                "isSave": false,
            };

            table.row.add(newItem).draw();
        });

        function handleSaveRow(event) {
            const button = $(event.target).closest('.btn-save');
            const row = table.row(button.closest('tr'));
            const data = row.data();

            // Set isSave menjadi true dan update data row
            if (data) {
                data.isSave = true;
                row.data(data).draw(false);
            }
        }

         function handleEditRow(event) {
            const button = $(event.target).closest('.btn-edit');
            const row = table.row(button.closest('tr'));
            const data = row.data();

            // Set isSave menjadi true dan update data row
            if (data) {
                data.isSave = false;
                row.data(data).draw(false);
            }
        }

        function handleDeleteRow(event) {
            const button = $(event.target).closest('.btn-delete');
            const row = table.row(button.closest('tr'));
            const data = row.data();

            console.log(data);

            Swal.fire({
              title: "Are you sure?",
              text: "You won't be able to revert this!",
              icon: "warning",
              showCancelButton: true,
              confirmButtonText: "Yes, delete it!",
              cancelButtonText: "No, cancel!",
              reverseButtons: true
            }).then((result) => {
              if (result.isConfirmed) {
                row.remove().draw();

                swalWithBootstrapButtons.fire({
                    title: "Deleted!",
                    text: "Your file has been deleted.",
                    icon: "success"
                });
              } else if (
                /* Read more about handling dismissals below */
                result.dismiss === Swal.DismissReason.cancel
              ) {
                swalWithBootstrapButtons.fire({
                  title: "Cancelled",
                  text: "Your imaginary file is safe :)",
                  icon: "error"
                });
              }
            });
        }

        function handleInputChange(event) {
            const input = $(event.target);
            const field = input.data('field');
            const value = field === 'ItemName' ? input.val() : parseFloat(input.val()) || 0;
            const row = table.row(input.closest('tr'));
            const data = row.data();

            if(data){
                data[field] = value;

                if (field === 'Quantity' || field === 'Price') {
                    data.Total = data.Quantity * data.Price;
                }
                row.data(data).draw(false);
            }
        }

        $('#salesOrderForm').submit(function (e) {
            e.preventDefault();

            const formData = new FormData(this);

            const dataObj = {};
            formData.forEach((value, key) => {
                if (dataObj[key]) {
                    if (!Array.isArray(dataObj[key])) {
                        dataObj[key] = [dataObj[key]];
                    }
                    dataObj[key].push(value);
                } else {
                    dataObj[key] = value;
                }
            });

            dataObj.Items = table.rows().data().toArray();

            $.ajax({
                url: '/order/Save',
                method: 'POST',
                contentType: 'application/json',
                data: JSON.stringify(dataObj),
                success: function (response) {
                    location.reload();
                    swalWithBootstrapButtons.fire({
                        title: "Saved!",
                        text: "Order saved successfully.",
                        icon: "success"
                    });
                },
                error: function (error) {
                    swalWithBootstrapButtons.fire({
                        title: "Cancelled",
                        text: "Error saving order :)",
                        icon: "error"
                    });
                }
            });
        });

    </script>
}